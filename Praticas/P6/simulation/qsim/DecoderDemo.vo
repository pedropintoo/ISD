// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 20.1.1 Build 720 11/11/2020 SJ Lite Edition"

// DATE "11/04/2022 10:24:24"

// 
// Device: Altera EP4CE6E22C6 Package TQFP144
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module DecoderDemo3 (
	F,
	X3,
	X2,
	X1,
	X0,
	E1,
	E0_L);
output 	F;
input 	X3;
input 	X2;
input 	X1;
input 	X0;
input 	E1;
input 	E0_L;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \F~output_o ;
wire \X3~input_o ;
wire \X1~input_o ;
wire \X2~input_o ;
wire \X0~input_o ;
wire \inst~0_combout ;
wire \E1~input_o ;
wire \E0_L~input_o ;
wire \inst~1_combout ;


cycloneive_io_obuf \F~output (
	.i(\inst~1_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\F~output_o ),
	.obar());
// synopsys translate_off
defparam \F~output .bus_hold = "false";
defparam \F~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \X3~input (
	.i(X3),
	.ibar(gnd),
	.o(\X3~input_o ));
// synopsys translate_off
defparam \X3~input .bus_hold = "false";
defparam \X3~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \X1~input (
	.i(X1),
	.ibar(gnd),
	.o(\X1~input_o ));
// synopsys translate_off
defparam \X1~input .bus_hold = "false";
defparam \X1~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \X2~input (
	.i(X2),
	.ibar(gnd),
	.o(\X2~input_o ));
// synopsys translate_off
defparam \X2~input .bus_hold = "false";
defparam \X2~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \X0~input (
	.i(X0),
	.ibar(gnd),
	.o(\X0~input_o ));
// synopsys translate_off
defparam \X0~input .bus_hold = "false";
defparam \X0~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst~0 (
// Equation(s):
// \inst~0_combout  = (\X3~input_o  & ((\X1~input_o ) # ((\X0~input_o )))) # (!\X3~input_o  & (\X1~input_o  & (\X2~input_o )))

	.dataa(\X3~input_o ),
	.datab(\X1~input_o ),
	.datac(\X2~input_o ),
	.datad(\X0~input_o ),
	.cin(gnd),
	.combout(\inst~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst~0 .lut_mask = 16'hEAC8;
defparam \inst~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \E1~input (
	.i(E1),
	.ibar(gnd),
	.o(\E1~input_o ));
// synopsys translate_off
defparam \E1~input .bus_hold = "false";
defparam \E1~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \E0_L~input (
	.i(E0_L),
	.ibar(gnd),
	.o(\E0_L~input_o ));
// synopsys translate_off
defparam \E0_L~input .bus_hold = "false";
defparam \E0_L~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst~1 (
// Equation(s):
// \inst~1_combout  = (\inst~0_combout  & (\E1~input_o  & !\E0_L~input_o ))

	.dataa(\inst~0_combout ),
	.datab(\E1~input_o ),
	.datac(gnd),
	.datad(\E0_L~input_o ),
	.cin(gnd),
	.combout(\inst~1_combout ),
	.cout());
// synopsys translate_off
defparam \inst~1 .lut_mask = 16'h0088;
defparam \inst~1 .sum_lutc_input = "datac";
// synopsys translate_on

assign F = \F~output_o ;

endmodule
