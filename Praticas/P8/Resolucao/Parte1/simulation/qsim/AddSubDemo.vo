// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 20.1.1 Build 720 11/11/2020 SJ Lite Edition"

// DATE "11/23/2022 22:56:31"

// 
// Device: Altera EP4CE115F29C7 Package FBGA780
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module AddSubDemo (
	Cout,
	ADD_SUB,
	A,
	B,
	Overflow,
	S);
output 	Cout;
input 	ADD_SUB;
input 	[3:0] A;
input 	[3:0] B;
output 	Overflow;
output 	[3:0] S;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \Cout~output_o ;
wire \Overflow~output_o ;
wire \S[3]~output_o ;
wire \S[2]~output_o ;
wire \S[1]~output_o ;
wire \S[0]~output_o ;
wire \B[3]~input_o ;
wire \ADD_SUB~input_o ;
wire \A[3]~input_o ;
wire \B[2]~input_o ;
wire \A[2]~input_o ;
wire \A[0]~input_o ;
wire \B[0]~input_o ;
wire \inst|inst|inst3~combout ;
wire \inst|inst|inst4~combout ;
wire \A[1]~input_o ;
wire \B[1]~input_o ;
wire \inst|inst5~combout ;
wire \inst|inst1|inst5~0_combout ;
wire \inst|inst2|inst5~0_combout ;
wire \inst|inst3|inst5~0_combout ;
wire \inst|231~combout ;
wire \inst|inst3|inst2~0_combout ;
wire \inst|inst2|inst2~0_combout ;
wire \inst|inst1|inst2~combout ;
wire \inst|inst|inst2~0_combout ;


cycloneive_io_obuf \Cout~output (
	.i(\inst|inst3|inst5~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Cout~output_o ),
	.obar());
// synopsys translate_off
defparam \Cout~output .bus_hold = "false";
defparam \Cout~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \Overflow~output (
	.i(\inst|231~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Overflow~output_o ),
	.obar());
// synopsys translate_off
defparam \Overflow~output .bus_hold = "false";
defparam \Overflow~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \S[3]~output (
	.i(\inst|inst3|inst2~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\S[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \S[3]~output .bus_hold = "false";
defparam \S[3]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \S[2]~output (
	.i(\inst|inst2|inst2~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\S[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \S[2]~output .bus_hold = "false";
defparam \S[2]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \S[1]~output (
	.i(\inst|inst1|inst2~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\S[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \S[1]~output .bus_hold = "false";
defparam \S[1]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \S[0]~output (
	.i(\inst|inst|inst2~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\S[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \S[0]~output .bus_hold = "false";
defparam \S[0]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \B[3]~input (
	.i(B[3]),
	.ibar(gnd),
	.o(\B[3]~input_o ));
// synopsys translate_off
defparam \B[3]~input .bus_hold = "false";
defparam \B[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \ADD_SUB~input (
	.i(ADD_SUB),
	.ibar(gnd),
	.o(\ADD_SUB~input_o ));
// synopsys translate_off
defparam \ADD_SUB~input .bus_hold = "false";
defparam \ADD_SUB~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \A[3]~input (
	.i(A[3]),
	.ibar(gnd),
	.o(\A[3]~input_o ));
// synopsys translate_off
defparam \A[3]~input .bus_hold = "false";
defparam \A[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \B[2]~input (
	.i(B[2]),
	.ibar(gnd),
	.o(\B[2]~input_o ));
// synopsys translate_off
defparam \B[2]~input .bus_hold = "false";
defparam \B[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \A[2]~input (
	.i(A[2]),
	.ibar(gnd),
	.o(\A[2]~input_o ));
// synopsys translate_off
defparam \A[2]~input .bus_hold = "false";
defparam \A[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \A[0]~input (
	.i(A[0]),
	.ibar(gnd),
	.o(\A[0]~input_o ));
// synopsys translate_off
defparam \A[0]~input .bus_hold = "false";
defparam \A[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \B[0]~input (
	.i(B[0]),
	.ibar(gnd),
	.o(\B[0]~input_o ));
// synopsys translate_off
defparam \B[0]~input .bus_hold = "false";
defparam \B[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst|inst|inst3 (
// Equation(s):
// \inst|inst|inst3~combout  = (\ADD_SUB~input_o  & (\A[0]~input_o  $ (!\B[0]~input_o )))

	.dataa(\ADD_SUB~input_o ),
	.datab(\A[0]~input_o ),
	.datac(\B[0]~input_o ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst|inst|inst3~combout ),
	.cout());
// synopsys translate_off
defparam \inst|inst|inst3 .lut_mask = 16'h8282;
defparam \inst|inst|inst3 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst|inst|inst4 (
// Equation(s):
// \inst|inst|inst4~combout  = (\A[0]~input_o  & (\ADD_SUB~input_o  $ (\B[0]~input_o )))

	.dataa(\A[0]~input_o ),
	.datab(gnd),
	.datac(\ADD_SUB~input_o ),
	.datad(\B[0]~input_o ),
	.cin(gnd),
	.combout(\inst|inst|inst4~combout ),
	.cout());
// synopsys translate_off
defparam \inst|inst|inst4 .lut_mask = 16'h0AA0;
defparam \inst|inst|inst4 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \A[1]~input (
	.i(A[1]),
	.ibar(gnd),
	.o(\A[1]~input_o ));
// synopsys translate_off
defparam \A[1]~input .bus_hold = "false";
defparam \A[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \B[1]~input (
	.i(B[1]),
	.ibar(gnd),
	.o(\B[1]~input_o ));
// synopsys translate_off
defparam \B[1]~input .bus_hold = "false";
defparam \B[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst|inst5 (
// Equation(s):
// \inst|inst5~combout  = \ADD_SUB~input_o  $ (\B[1]~input_o )

	.dataa(gnd),
	.datab(gnd),
	.datac(\ADD_SUB~input_o ),
	.datad(\B[1]~input_o ),
	.cin(gnd),
	.combout(\inst|inst5~combout ),
	.cout());
// synopsys translate_off
defparam \inst|inst5 .lut_mask = 16'h0FF0;
defparam \inst|inst5 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst|inst1|inst5~0 (
// Equation(s):
// \inst|inst1|inst5~0_combout  = (\A[1]~input_o  & ((\inst|inst|inst3~combout ) # ((\inst|inst|inst4~combout ) # (\inst|inst5~combout )))) # (!\A[1]~input_o  & (\inst|inst5~combout  & ((\inst|inst|inst3~combout ) # (\inst|inst|inst4~combout ))))

	.dataa(\inst|inst|inst3~combout ),
	.datab(\inst|inst|inst4~combout ),
	.datac(\A[1]~input_o ),
	.datad(\inst|inst5~combout ),
	.cin(gnd),
	.combout(\inst|inst1|inst5~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst|inst1|inst5~0 .lut_mask = 16'hFEE0;
defparam \inst|inst1|inst5~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst|inst2|inst5~0 (
// Equation(s):
// \inst|inst2|inst5~0_combout  = (\A[2]~input_o  & ((\inst|inst1|inst5~0_combout ) # (\B[2]~input_o  $ (\ADD_SUB~input_o )))) # (!\A[2]~input_o  & (\inst|inst1|inst5~0_combout  & (\B[2]~input_o  $ (\ADD_SUB~input_o ))))

	.dataa(\B[2]~input_o ),
	.datab(\ADD_SUB~input_o ),
	.datac(\A[2]~input_o ),
	.datad(\inst|inst1|inst5~0_combout ),
	.cin(gnd),
	.combout(\inst|inst2|inst5~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst|inst2|inst5~0 .lut_mask = 16'hF660;
defparam \inst|inst2|inst5~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst|inst3|inst5~0 (
// Equation(s):
// \inst|inst3|inst5~0_combout  = (\A[3]~input_o  & ((\inst|inst2|inst5~0_combout ) # (\B[3]~input_o  $ (\ADD_SUB~input_o )))) # (!\A[3]~input_o  & (\inst|inst2|inst5~0_combout  & (\B[3]~input_o  $ (\ADD_SUB~input_o ))))

	.dataa(\B[3]~input_o ),
	.datab(\ADD_SUB~input_o ),
	.datac(\A[3]~input_o ),
	.datad(\inst|inst2|inst5~0_combout ),
	.cin(gnd),
	.combout(\inst|inst3|inst5~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst|inst3|inst5~0 .lut_mask = 16'hF660;
defparam \inst|inst3|inst5~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst|231 (
// Equation(s):
// \inst|231~combout  = (\A[3]~input_o  & (!\inst|inst2|inst5~0_combout  & (\B[3]~input_o  $ (\ADD_SUB~input_o )))) # (!\A[3]~input_o  & (\inst|inst2|inst5~0_combout  & (\B[3]~input_o  $ (!\ADD_SUB~input_o ))))

	.dataa(\B[3]~input_o ),
	.datab(\ADD_SUB~input_o ),
	.datac(\A[3]~input_o ),
	.datad(\inst|inst2|inst5~0_combout ),
	.cin(gnd),
	.combout(\inst|231~combout ),
	.cout());
// synopsys translate_off
defparam \inst|231 .lut_mask = 16'h0960;
defparam \inst|231 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst|inst3|inst2~0 (
// Equation(s):
// \inst|inst3|inst2~0_combout  = \B[3]~input_o  $ (\ADD_SUB~input_o  $ (\A[3]~input_o  $ (\inst|inst2|inst5~0_combout )))

	.dataa(\B[3]~input_o ),
	.datab(\ADD_SUB~input_o ),
	.datac(\A[3]~input_o ),
	.datad(\inst|inst2|inst5~0_combout ),
	.cin(gnd),
	.combout(\inst|inst3|inst2~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst|inst3|inst2~0 .lut_mask = 16'h6996;
defparam \inst|inst3|inst2~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst|inst2|inst2~0 (
// Equation(s):
// \inst|inst2|inst2~0_combout  = \ADD_SUB~input_o  $ (\B[2]~input_o  $ (\A[2]~input_o  $ (\inst|inst1|inst5~0_combout )))

	.dataa(\ADD_SUB~input_o ),
	.datab(\B[2]~input_o ),
	.datac(\A[2]~input_o ),
	.datad(\inst|inst1|inst5~0_combout ),
	.cin(gnd),
	.combout(\inst|inst2|inst2~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst|inst2|inst2~0 .lut_mask = 16'h6996;
defparam \inst|inst2|inst2~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst|inst1|inst2 (
// Equation(s):
// \inst|inst1|inst2~combout  = \A[1]~input_o  $ (\inst|inst5~combout  $ (((\inst|inst|inst3~combout ) # (\inst|inst|inst4~combout ))))

	.dataa(\A[1]~input_o ),
	.datab(\inst|inst5~combout ),
	.datac(\inst|inst|inst3~combout ),
	.datad(\inst|inst|inst4~combout ),
	.cin(gnd),
	.combout(\inst|inst1|inst2~combout ),
	.cout());
// synopsys translate_off
defparam \inst|inst1|inst2 .lut_mask = 16'h9996;
defparam \inst|inst1|inst2 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst|inst|inst2~0 (
// Equation(s):
// \inst|inst|inst2~0_combout  = \A[0]~input_o  $ (\B[0]~input_o )

	.dataa(gnd),
	.datab(gnd),
	.datac(\A[0]~input_o ),
	.datad(\B[0]~input_o ),
	.cin(gnd),
	.combout(\inst|inst|inst2~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst|inst|inst2~0 .lut_mask = 16'h0FF0;
defparam \inst|inst|inst2~0 .sum_lutc_input = "datac";
// synopsys translate_on

assign Cout = \Cout~output_o ;

assign Overflow = \Overflow~output_o ;

assign S[3] = \S[3]~output_o ;

assign S[2] = \S[2]~output_o ;

assign S[1] = \S[1]~output_o ;

assign S[0] = \S[0]~output_o ;

endmodule
