// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 20.1.1 Build 720 11/11/2020 SJ Lite Edition"

// DATE "12/29/2022 14:56:41"

// 
// Device: Altera EP4CE115F29C7 Package FBGA780
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module SerialNeg (
	Y,
	Clk,
	Reset,
	X);
output 	Y;
input 	Clk;
input 	Reset;
input 	X;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \Y~output_o ;
wire \Clk~input_o ;
wire \Reset~input_o ;
wire \X~input_o ;
wire \inst11~0_combout ;
wire \Q1~q ;
wire \inst10~0_combout ;
wire \Q0~q ;


cycloneive_io_obuf \Y~output (
	.i(\Q0~q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Y~output_o ),
	.obar());
// synopsys translate_off
defparam \Y~output .bus_hold = "false";
defparam \Y~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \Clk~input (
	.i(Clk),
	.ibar(gnd),
	.o(\Clk~input_o ));
// synopsys translate_off
defparam \Clk~input .bus_hold = "false";
defparam \Clk~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \Reset~input (
	.i(Reset),
	.ibar(gnd),
	.o(\Reset~input_o ));
// synopsys translate_off
defparam \Reset~input .bus_hold = "false";
defparam \Reset~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \X~input (
	.i(X),
	.ibar(gnd),
	.o(\X~input_o ));
// synopsys translate_off
defparam \X~input .bus_hold = "false";
defparam \X~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst11~0 (
// Equation(s):
// \inst11~0_combout  = (\Reset~input_o  & (\X~input_o  & ((\Q0~q ) # (\Q1~q ))))

	.dataa(\Reset~input_o ),
	.datab(\X~input_o ),
	.datac(\Q0~q ),
	.datad(\Q1~q ),
	.cin(gnd),
	.combout(\inst11~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst11~0 .lut_mask = 16'h8880;
defparam \inst11~0 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas Q1(
	.clk(\Clk~input_o ),
	.d(\inst11~0_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\Q1~q ),
	.prn(vcc));
// synopsys translate_off
defparam Q1.is_wysiwyg = "true";
defparam Q1.power_up = "low";
// synopsys translate_on

cycloneive_lcell_comb \inst10~0 (
// Equation(s):
// \inst10~0_combout  = (\Reset~input_o  & (\X~input_o  $ (((\Q0~q ) # (\Q1~q )))))

	.dataa(\Reset~input_o ),
	.datab(\Q0~q ),
	.datac(\Q1~q ),
	.datad(\X~input_o ),
	.cin(gnd),
	.combout(\inst10~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst10~0 .lut_mask = 16'h02A8;
defparam \inst10~0 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas Q0(
	.clk(\Clk~input_o ),
	.d(\inst10~0_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\Q0~q ),
	.prn(vcc));
// synopsys translate_off
defparam Q0.is_wysiwyg = "true";
defparam Q0.power_up = "low";
// synopsys translate_on

assign Y = \Y~output_o ;

endmodule
